Ձևավորմանը բերելը. Զանգվածի ձևեր և առանցքներ

Shapes - ձևեր
Axes - առանցքներ

Այժմ, երբ տեսել եք NumPy- ի կարողությունների մի մասը, ժամանակն է ամրացնել այդ հիմքը որոշ կարևոր տեսության միջոցով: Կան մի քանի հասկացություններ, որոնք կարևոր են հիշել, հատկապես, երբ աշխատում եք ավելի բարձր չափսերի զանգվածների հետ:
Վեկտորները, որոնք թվերի միաչափ զանգված են, հետևելու համար ամենաքիչը բարդ են: Երկու չափերը նույնպես շատ վատ չեն, քանի որ դրանք նման են աղյուսակներին: Բայց ամեն ինչ սկսում է բարդանալ երեք հարթություններում, և պատկերացնո՞ւմ է չորս: Մոռացիր դրա մասին. 

Վարպետության ձևը
Ձևը հիմնական հասկացությունն է, երբ դուք օգտագործում եք բազմաչափ զանգվածներ: Որոշակի պահի ավելի հեշտ է մոռանալ ձեր տվյալների ձևը պատկերացնելու մասին և փոխարենը պահպանել որոշ մտավոր կանոններ և վստահել NumPy- ին ՝ ձեզ ճիշտ ձև ասելու համար:

Բոլոր զանգվածներն ունեն հատկություն, որը կոչվում է .ձև, որը վերադարձնում է յուրաքանչյուր հարթության չափի տուպլ: Ավելի քիչ կարևոր է, թե որ չափումն է որից, բայց կարևոր է, որ գործառույթներին փոխանցվող զանգվածները լինեն այն ձևի, ինչպիսին սպասում են գործառույթները: Ձեր տվյալների պատշաճ ձևը հաստատելու ընդհանուր ձևը տվյալների և դրանց ձևի տպումն է, մինչև համոզվեք, որ ամեն ինչ կաշխատի այնպես, ինչպես սպասում եք:

Այս հաջորդ օրինակը ցույց կտա այս գործընթացը: Դուք կստեղծեք բարդ ձև ունեցող զանգված, ստուգեք այն և վերադասավորեք ՝ կարծես թե կարծես.

>>> temperatures = np.array([
...     29.3, 42.1, 18.8, 16.1, 38.0, 12.5,
...     12.6, 49.9, 38.6, 31.3, 9.2, 22.2
... ]).reshape(2, 2, 3)
>>> temperatures.shape
(2, 2, 3)
>>> temperatures
array([[[29.3, 42.1, 18.8],
        [16.1, 38. , 12.5]],

       [[12.6, 49.9, 38.6],
        [31.3,  9.2, 22.2]]])
>>> np.swapaxes(temperatures, 1, 2)
array([[[29.3, 16.1],
        [42.1, 38. ],
        [18.8, 12.5]],

       [[12.6, 31.3],
        [49.9,  9.2],
        [38.6, 22.2]]])
>>>

Այստեղ դուք օգտագործում եք numpy.ndarray մեթոդը, որը կոչվում է .reshape ()՝ 2 × 2 × 3 տվյալների բլոկ ստեղծելու համար: Երբ մուտքագրում 3-ում ստուգում եք ձեր զանգվածի ձևը, դա հենց այն է, ինչ դուք ասել եք, որ լինի: Այնուամենայնիվ, դուք կարող եք տեսնել, թե ինչպես են տպագրված զանգվածները արագ դառնում պատկերավոր երեք կամ ավելի չափսերով: .Swapaxes- ի հետ առանցքները փոխելուց հետո քիչ է պարզվում, թե որ չափումն է որն: Առանցքների մասին ավելին կտեսնեք հաջորդ բաժնում:

Ձևը կրկին կհայտնվի հեռարձակման բաժնում: Առայժմ պարզապես հիշեք, որ այս փոքրիկ ստուգումները ոչինչ չեն արժի: Միշտ կարող եք ջնջել բջիջները կամ ազատվել կոդից, երբ ամեն ինչ սահուն կերպով ընթանա:

Հասկանալ առանցքները
Վերոնշյալ օրինակը ցույց է տալիս, թե որքան կարևոր է իմանալ ոչ միայն ինչ ձևի մեջ են ձեր տվյալները, այլև որ տվյալները որ առանցքում են: NumPy զանգվածներում առանցքները զրոյական ինդեքսավորվում են և որոշում, թե որ չափումն է: Օրինակ, երկչափ զանգվածն ունի ուղղահայաց առանցք (առանցք 0) և հորիզոնական առանցք (առանցք 1): NumPy- ի շատ գործառույթներ և հրամաններ փոխում են իրենց վարքագիծը ՝ ելնելով այն բանից, թե որ առանցքի վրա եք ասում, որ մշակեն:

Այս օրինակը ցույց կտա, թե ինչպես է իրեն պահում .max- ը լռելյայն, առանց առանցքի փաստարկի, և ինչպես է այն փոխում ֆունկցիոնալությունը ՝ կախված այն բանից, թե որ առանցքը եք նշում, երբ առաջարկում եք փաստարկ

>>> table = np.array([
...     [5, 3, 7, 1],
...     [2, 6, 7 ,9],
...     [1, 1, 1, 1],
...     [4, 3, 2, 0],
... ])
>>> table.max()
9
>>> table.max(axis=0)
array([5, 6, 7, 9])
>>> table.max(axis=1)
array([7, 9, 1, 4])

Լռելյայն, .max () - ը վերադարձնում է ամենամեծ արժեքը ամբողջ զանգվածում, անկախ նրանից, թե որքան չափեր կան: Այնուամենայնիվ, հենց որ դուք ընտրեք առանցք, այն կատարում է այդ հաշվարկը տվյալ որոշակի առանցքի երկայնքով արժեքների յուրաքանչյուր հավաքածուի համար: Օրինակ, առանցքի = 0 փաստարկով .max () ընտրում է առավելագույն արժեքը աղյուսակի արժեքների չորս ուղղահայաց հավաքածուներից յուրաքանչյուրում և վերադարձնում է այն զանգվածը, որը հարթեցված է կամ համախմբված է միաչափ զանգվածում:

Իրականում, NumPy- ի գործառույթներից շատերն այս կերպ են վարվում. Եթե առանցք նշված չէ, ապա նրանք գործողություն են կատարում ամբողջ տվյալների բազայի վրա: Հակառակ դեպքում, նրանք գործողությունը կատարում են առանցքային իմաստով:

