Կրկնօրինակ պիտակները
Ինդեքսային օբյեկտները չեն պահանջվում եզակի լինել. կարող եք ունենալ կրկնակի տողի կամ սյունակի պիտակներ: Սկզբում սա կարող է մի փոքր շփոթեցնող լինել: Եթե դուք ծանոթ եք SQL- ին, գիտեք, որ տողի պիտակները նման են սեղանի հիմնական բանալին, և դուք երբեք չէիք ցանկանա կրկնօրինակներ կատարել SQL աղյուսակում: Բայց պանդաների դերերից մեկը խառնաշփոթ, իրական աշխարհի տվյալները մաքրելն է ՝ նախքան դրանք հոսանքային հոսքի ներքևում գտնվող համակարգ անցնելը: Իսկ իրական աշխարհի տվյալներն ունեն կրկնօրինակներ, նույնիսկ այն դաշտերում, որոնք ենթադրաբար եզակի են:

Այս բաժնում նկարագրվում է, թե ինչպես կրկնօրինակ պիտակները փոխում են որոշակի գործողությունների վարքագիծը, և ինչպես են կանխում կրկնօրինակների առաջացումը գործողությունների ընթացքում կամ դրանց հայտնաբերման դեպքում:

Կրկնօրինակ պիտակների հետևանքները
Պանդաների որոշ մեթոդներ (օրինակ, Series.reindex ()) պարզապես չեն գործում առկա կրկնօրինակների հետ: Արդյունքը հնարավոր չէ որոշել, ուստի պանդաները բարձրանում են:

>>> s1 = pd.Series([0, 1, 2], index=["a", "b", "b"])
s1.reindex(["a", "b", "c"])

# https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html
>>> import numpy as np
>>> import pandas as pd
>>> s = pd.Series([1, 3, 5, np.nan, 6, 8])
# Creating a DataFrame by passing a NumPy array, with a datetime index and labeled columns:
>>> dates = pd.date_range("20130101", periods=6)
>>> df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list("ABCD"))
# Creating a DataFrame by passing a dict of objects that can be converted to series-like.
>>> df2 = pd.DataFrame(
...     {
...         "A": 1.0,
...         "B": pd.Timestamp("20130102"),
...         "C": pd.Series(1, index=list(range(4)), dtype="float32"),
...         "D": np.array([3] * 4, dtype="int32"),
...         "E": pd.Categorical(["test", "train", "test", "train"]),
...         "F": "foo",
...     }
... )
# The columns of the resulting DataFrame have different dtypes.
>>> df2.dtypes
# If you’re using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here’s a subset of the attributes that will be completed:
>>>>>> # As you can see, the columns A, B, C, and D are automatically tab completed. E and F are there as well; the rest of the attributes have been truncated for brevity.
>>> # Here is how to view the top and bottom rows of the frame:
>>> df.head()
>>> df.tail(3)
>>> # Display the index, columns:
>>> df.index
>>> df.columns
>>> # DataFrame.to_numpy() gives a NumPy representation of the underlying data. Note that this can be an expensive operation when your DataFrame has columns with different data types, which comes down to a fundamental difference between pandas and NumPy: NumPy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column. When you call DataFrame.to_numpy(), pandas will find the NumPy dtype that can hold all of the dtypes in the DataFrame. This may end up being object, which requires casting every value to a Python object.
>>> # For df, our DataFrame of all floating-point values, DataFrame.to_numpy() is fast and doesn’t require copying data.
>>> df.to_numpy()
>>> # For df2, the DataFrame with multiple dtypes, DataFrame.to_numpy() is relatively expensive.
>>> df2.to_numpy()
>>> # DataFrame.to_numpy() does not include the index or column labels in the output.
>>> # describe() shows a quick statistic summary of your data:
>>> df.describe()
>>> # Transposing your data:
>>> df.T
>>> # Sorting by an axis:

>>> df.to_json('test.json')   
>>> df = pd.read_json('test.json')

>>> df.sort_index(axis=1, ascending=False) # Ըստ սյուների
>>> df.sort_values(by="B") # Ըստ B-ի տողերի

Ընտրանքներ

>>> df["A"] # Ընտրել "A"-սյունը
>>> df[0:3]  # Ընտրել 0,0,2<3 տողերը
>>> df["20130102":"20130104"] # Ընտրել "20130102":"20130104" տողերը
>>> df.loc[dates[0]] # Ընտրել "0"-տողը
>>> df.loc[:, ["A", "B"]] # Ընտրել "A", "B"-սյուները
>>> df.loc["20130102":"20130104", ["A", "B"]] # Ընտրել "20130102":"20130104"-տողերին համապատասխան "A", "B"-սյուները
>>> df.loc[dates[0], "A"] # Ընտրել "0", "A"-բջիջը
>>> df.at[dates[0], "A"] # Ընտրել "0", "A"-բջիջը

Ընտրանքներ ըստ դիրքի

>>> df.iloc[3] # Ընտրել "0"-տողը
>>> df.iloc[3:5, 0:2]  # Ընտրել "3:5"-տողերի 0:2 սյուները
>>> df.iloc[[1, 2, 4], [0, 2]] # Ընտրել [1, 2, 4]-տողերի 0:2 սյուները
>>> df.iloc[1:3, :] # Ընտրել 1:3-տողերը
>>> df.iloc[:, 1:3] # Ընտրել 1:3 սյուները
>>> df.iloc[1, 1]  # Ընտրել "1", "1"-բջիջը
>>> df.iat[1, 1] # Ընտրել "1", "1"-բջիջը - արագ տարբերակ
>>> df[df["A"] > 0] # Ընտրել 1:3-տողերը, որոնց "A" սյան արժեքը  > 0
>>> df[df > 0]  # Ընտրել բջիջները, արժեքը  > 0
>>> df2 = df.copy() # կրկնօրինակը
>>> df2["E"] = ["one", "one", "two", "three", "four", "three"] # Ավելացնել "E" - սյունը
>>> df2[df2["E"].isin(["two", "four"])] # Ընտրել տողերը ըստ պայմանի

Պարամետր - Setting

>>> s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range("20130102", periods=6)) # Առաջին սյունը փոխարինել տրվածով
>>> df["F"] = s1  # Ավելացնել "F" սյունը և փոխարինել տրվածով s1
>>> df.iat[0, 1] = 0 # փոխել բջջի արժեըը 0 ըստ դիրքի
>>> df.at[dates[0], "A"] = 0 # փոխել բջջի արժեըը 0  ըստ նիշի
>>> df.loc[:, "D"] = np.array([5] * len(df)) # փոխել "D" սյան  արժեըները  (5)
>>> df2 = df.copy()
>>> df2[df2 > 0] = -df2 # փոխել պարամետրերը ըստ պայմանի

Բացակայող տվյալներ

>>> df = pd.read_csv('tmp.csv')
# df = pd.read_fwf('tmp.csv')

pandas- ը հիմնականում օգտագործում է np.nan արժեքը `բացակայող տվյալները ներկայացնելու համար: Այն լռելյայն ներառված չէ հաշվարկների մեջ: Տե՛ս «Բացակայող տվյալներ» բաժինը:

Վերաինդեքսավորումը թույլ է տալիս փոխել / ավելացնել / ջնջել ինդեքսը նշված առանցքի վրա: Սա վերադարձնում է տվյալների պատճենը: 

>>> df.dtypes
A    float64
B    float64
C    float64
D      int32
F    float64
dtype: object
>>> df.loc[:, "D"] = np.array([5] * len(df))
>>> df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ["E"])
>>> df1.loc[dates[0] : dates[1], "E"] = 1
To drop any rows that have missing data.
>>> df1.dropna(how="any")
Filling missing data.
>>> df1.fillna(value=5)



# ========================================

>>> df = pd.read_json('titanic.json')
>>> df.head()
>>> df.info()
>>> df.to_json('elq.json')
# ========================================

>>> URL = 'http://raw.githubusercontent.com/BindiChen/machine-learning/master/data-analysis/027-pandas-convert-json/data/simple.json'
>>> df = pd.read_json(URL)
# ========================================
# https://towardsdatascience.com/how-to-convert-json-into-a-pandas-dataframe-100b2ae1e0d8
>>> df = pd.read_json('nested_list.json')
# ========================================
>>> with open('nested_mix.json','r') as f:      
...     data = json.loads(f.read())
... 
>>> data
{'school_name': 'local primary school', 'class': 'Year 1', 'info': {'president': 'John Kasich', 'address': 'ABC road, London, UK', 'contacts': {'email': 'admin@e.com', 'tel': '123456789'}}, 'students': [{'id': 'A001', 'name': 'Tom', 'math': 60, 'physics': 66, 'chemistry': 61}, {'id': 'A002', 'name': 'James', 'math': 89, 'physics': 76, 'chemistry': 51}, {'id': 'A003', 'name': 'Jenny', 'math': 79, 'physics': 90, 'chemistry': 78}]}
>>> # Normalizing data
>>> df = pd.json_normalize(data, record_path =['students'])
>>> df
     id   name  math  physics  chemistry
0  A001    Tom    60       66         61
1  A002  James    89       76         51
2  A003  Jenny    79       90         78
# ========================================

>>> df = pd.json_normalize(
...     data, 
...     record_path =['students'], 
...     meta=[
...         'class',
...         ['info', 'president'],
...         ['info', 'contacts', 'tel']
...     ]
... )
>>> df
     id   name  math  physics  chemistry   class info.president info.contacts.tel
0  A001    Tom    60       66         61  Year 1    John Kasich         123456789
1  A002  James    89       76         51  Year 1    John Kasich         123456789
2  A003  Jenny    79       90         78  Year 1    John Kasich         123456789
# ========================================

